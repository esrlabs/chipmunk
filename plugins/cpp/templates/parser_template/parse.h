// Generated by `wit-bindgen` 0.42.1. DO NOT EDIT!
#ifndef __BINDINGS_PARSE_H
#define __BINDINGS_PARSE_H
#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

typedef struct parse_string_t {
  uint8_t*ptr;
  size_t len;
} parse_string_t;

// The definitions of the log Level
typedef uint8_t chipmunk_shared_logging_level_t;

// Represents error log level
#define CHIPMUNK_SHARED_LOGGING_LEVEL_ERROR 0
// Represents warn log level
#define CHIPMUNK_SHARED_LOGGING_LEVEL_WARN 1
// Represents info log level
#define CHIPMUNK_SHARED_LOGGING_LEVEL_INFO 2
// Represents debug log level
#define CHIPMUNK_SHARED_LOGGING_LEVEL_DEBUG 3
// Represents trace log level
#define CHIPMUNK_SHARED_LOGGING_LEVEL_TRACE 4

typedef struct {
  bool is_err;
  union {
    parse_string_t ok;
    parse_string_t err;
  } val;
} chipmunk_shared_sandbox_result_string_string_t;

// Represents a semantic version.
typedef struct chipmunk_shared_shared_types_version_t {
  // The major part of semantic version.
  uint16_t   major;
  // The minor part of semantic version.
  uint16_t   minor;
  // The patch part of semantic version.
  uint16_t   patch;
} chipmunk_shared_shared_types_version_t;

// Error type while initializing the plugins
typedef struct chipmunk_shared_shared_types_init_error_t {
  uint8_t tag;
  union {
    parse_string_t     config;
    parse_string_t     io;
    parse_string_t     unsupported;
    parse_string_t     other;
  } val;
} chipmunk_shared_shared_types_init_error_t;

// Errors related to the provided configurations to the plugin.
#define CHIPMUNK_SHARED_SHARED_TYPES_INIT_ERROR_CONFIG 0
// Errors happened around IO operations.
#define CHIPMUNK_SHARED_SHARED_TYPES_INIT_ERROR_IO 1
// Errors represents an unsupported interface by the plugin.
#define CHIPMUNK_SHARED_SHARED_TYPES_INIT_ERROR_UNSUPPORTED 2
// Other kind of errors with custom string message.
#define CHIPMUNK_SHARED_SHARED_TYPES_INIT_ERROR_OTHER 3

typedef struct {
  parse_string_t *ptr;
  size_t len;
} parse_list_string_t;

// Represents the value of a configuration item.
typedef struct chipmunk_shared_shared_types_config_value_t {
  uint8_t tag;
  union {
    bool     boolean;
    int32_t     integer;
    float     float_;
    parse_string_t     text;
    parse_list_string_t     directories;
    parse_list_string_t     files;
    parse_string_t     dropdown;
  } val;
} chipmunk_shared_shared_types_config_value_t;

// Represents boolean value.
#define CHIPMUNK_SHARED_SHARED_TYPES_CONFIG_VALUE_BOOLEAN 0
// Represents numerical integer value.
#define CHIPMUNK_SHARED_SHARED_TYPES_CONFIG_VALUE_INTEGER 1
// Represents numerical floating value.
#define CHIPMUNK_SHARED_SHARED_TYPES_CONFIG_VALUE_FLOAT 2
// Represents text value.
#define CHIPMUNK_SHARED_SHARED_TYPES_CONFIG_VALUE_TEXT 3
// List of strings representing directory paths.
#define CHIPMUNK_SHARED_SHARED_TYPES_CONFIG_VALUE_DIRECTORIES 4
// List of strings representing file paths.
#define CHIPMUNK_SHARED_SHARED_TYPES_CONFIG_VALUE_FILES 5
// A string representing a selected option from a drop-down menu
#define CHIPMUNK_SHARED_SHARED_TYPES_CONFIG_VALUE_DROPDOWN 6

// Represents a configuration item, that will be provided to the plugin in the
// initialization function.
typedef struct chipmunk_shared_shared_types_config_item_t {
  // The identifier of the configuration item. This ID must match the one provided in
  // `config-schema-item`
  parse_string_t   id;
  // The corresponding value of the configuration with the provided ID.
  // The value type matches the type define in `config-schema-item` with the same ID.
  chipmunk_shared_shared_types_config_value_t   value;
} chipmunk_shared_shared_types_config_item_t;

typedef struct {
  parse_list_string_t f0;
  parse_string_t f1;
} parse_tuple2_list_string_string_t;

// Defines the possible input types for configuration schemas.
typedef struct chipmunk_shared_shared_types_config_schema_type_t {
  uint8_t tag;
  union {
    bool     boolean;
    int32_t     integer;
    float     float_;
    parse_string_t     text;
    parse_list_string_t     files;
    parse_tuple2_list_string_string_t     dropdown;
  } val;
} chipmunk_shared_shared_types_config_schema_type_t;

// Represents boolean type with the default value.
#define CHIPMUNK_SHARED_SHARED_TYPES_CONFIG_SCHEMA_TYPE_BOOLEAN 0
// Represents numerical integer type with the default value.
#define CHIPMUNK_SHARED_SHARED_TYPES_CONFIG_SCHEMA_TYPE_INTEGER 1
// Represents numerical floating type with the default value.
#define CHIPMUNK_SHARED_SHARED_TYPES_CONFIG_SCHEMA_TYPE_FLOAT 2
// Represents a text type with the default value.
#define CHIPMUNK_SHARED_SHARED_TYPES_CONFIG_SCHEMA_TYPE_TEXT 3
// Represents a list of directories.
#define CHIPMUNK_SHARED_SHARED_TYPES_CONFIG_SCHEMA_TYPE_DIRECTORIES 4
// Represents a list of types with the given allowed file extensions (Empty to allow all).
#define CHIPMUNK_SHARED_SHARED_TYPES_CONFIG_SCHEMA_TYPE_FILES 5
// Represents Drop-down input type with a list of selectable options and the default value.
#define CHIPMUNK_SHARED_SHARED_TYPES_CONFIG_SCHEMA_TYPE_DROPDOWN 6

typedef struct {
  bool is_some;
  parse_string_t val;
} parse_option_string_t;

// Represents the schema for a configuration item, which should be provided from the plugins
// to define their configuration that needed to be set by the users.
typedef struct chipmunk_shared_shared_types_config_schema_item_t {
  // The identifier of the configuration schema item. This ID will match the one provided in
  // `config-item`
  parse_string_t   id;
  // Title of the configuration item that will be presented to the users.
  parse_string_t   title;
  // An optional short description of the configuration item that will be presented to the users.
  parse_option_string_t   description;
  // Represent the type of the needed configuration value (boolean, string, path ...)
  chipmunk_shared_shared_types_config_schema_type_t   input_type;
} chipmunk_shared_shared_types_config_schema_item_t;

typedef chipmunk_shared_logging_level_t chipmunk_parser_parse_types_level_t;

// General configurations related to all parsers
typedef struct chipmunk_parser_parse_types_parser_config_t {
  chipmunk_parser_parse_types_level_t   log_level;
} chipmunk_parser_parse_types_parser_config_t;

// Represents a parsed message with either a single line or multiple columns.
typedef struct chipmunk_parser_parse_types_parsed_message_t {
  uint8_t tag;
  union {
    parse_string_t     line;
    parse_list_string_t     columns;
  } val;
} chipmunk_parser_parse_types_parsed_message_t;

// Single string representing the message.
#define CHIPMUNK_PARSER_PARSE_TYPES_PARSED_MESSAGE_LINE 0
// List of strings representing the message split into columns.
#define CHIPMUNK_PARSER_PARSE_TYPES_PARSED_MESSAGE_COLUMNS 1

typedef struct {
  uint64_t *ptr;
  size_t len;
} parse_list_u64_t;

typedef struct {
  uint8_t *ptr;
  size_t len;
} parse_list_u8_t;

// Attachment included within parsed item
typedef struct chipmunk_parser_parse_types_attachment_t {
  parse_string_t   name;
  uint64_t   size;
  parse_option_string_t   created_date;
  parse_option_string_t   modified_date;
  // The indexes of the message within the original trace (0-based).
  parse_list_u64_t   messages;
  // Data as bytes
  parse_list_u8_t   data;
} chipmunk_parser_parse_types_attachment_t;

typedef struct {
  chipmunk_parser_parse_types_parsed_message_t f0;
  chipmunk_parser_parse_types_attachment_t f1;
} chipmunk_parser_parse_types_tuple2_parsed_message_attachment_t;

// Represents a parsed item
typedef struct chipmunk_parser_parse_types_parse_yield_t {
  uint8_t tag;
  union {
    chipmunk_parser_parse_types_parsed_message_t     message;
    chipmunk_parser_parse_types_attachment_t     attachment;
    chipmunk_parser_parse_types_tuple2_parsed_message_attachment_t     message_and_attachment;
  } val;
} chipmunk_parser_parse_types_parse_yield_t;

#define CHIPMUNK_PARSER_PARSE_TYPES_PARSE_YIELD_MESSAGE 0
#define CHIPMUNK_PARSER_PARSE_TYPES_PARSE_YIELD_ATTACHMENT 1
#define CHIPMUNK_PARSER_PARSE_TYPES_PARSE_YIELD_MESSAGE_AND_ATTACHMENT 2

typedef struct {
  bool is_some;
  chipmunk_parser_parse_types_parse_yield_t val;
} chipmunk_parser_parse_types_option_parse_yield_t;

// Return item for parsing call
typedef struct chipmunk_parser_parse_types_parse_return_t {
  // Parsed item or None if skipped
  chipmunk_parser_parse_types_option_parse_yield_t   value;
  // Consumed bytes count
  uint64_t   consumed;
} chipmunk_parser_parse_types_parse_return_t;

typedef struct chipmunk_parser_parse_types_parse_error_t {
  uint8_t tag;
  union {
    parse_string_t     unrecoverable;
    parse_string_t     parse;
  } val;
} chipmunk_parser_parse_types_parse_error_t;

#define CHIPMUNK_PARSER_PARSE_TYPES_PARSE_ERROR_UNRECOVERABLE 0
#define CHIPMUNK_PARSER_PARSE_TYPES_PARSE_ERROR_PARSE 1
#define CHIPMUNK_PARSER_PARSE_TYPES_PARSE_ERROR_INCOMPLETE 2
#define CHIPMUNK_PARSER_PARSE_TYPES_PARSE_ERROR_EOF 3

// Represents the infos of a column that will be used in the render options.
typedef struct chipmunk_parser_parse_types_column_info_t {
  // Header title to be rendered on the top of the column in log view.
  parse_string_t   caption;
  // Description to be shown as tooltip for the column.
  parse_string_t   description;
  // Width of column (-1) for unlimited.
  int16_t   width;
} chipmunk_parser_parse_types_column_info_t;

typedef struct {
  chipmunk_parser_parse_types_column_info_t *ptr;
  size_t len;
} chipmunk_parser_parse_types_list_column_info_t;

// Represents the options needs to render columns information if they exist.
typedef struct chipmunk_parser_parse_types_columns_render_options_t {
  // List of columns infos providing the needed information for each column in log view.
  // 
  // Note: The count of this list must match the count of the column of each log message.
  chipmunk_parser_parse_types_list_column_info_t   columns;
  // Minimum column width.
  uint16_t   min_width;
  // Maximum column width.
  uint16_t   max_width;
} chipmunk_parser_parse_types_columns_render_options_t;

typedef struct {
  bool is_some;
  chipmunk_parser_parse_types_columns_render_options_t val;
} chipmunk_parser_parse_types_option_columns_render_options_t;

// Provides additional information to be rendered in the log view.
typedef struct chipmunk_parser_parse_types_render_options_t {
  // Rendering information for the column if log messages have multiple columns.
  // The count of the provided columns must match the count of the columns of each log message as well.
  chipmunk_parser_parse_types_option_columns_render_options_t   columns_options;
} chipmunk_parser_parse_types_render_options_t;

typedef chipmunk_shared_shared_types_version_t exports_chipmunk_parser_parser_version_t;

typedef chipmunk_shared_shared_types_init_error_t exports_chipmunk_parser_parser_init_error_t;

typedef chipmunk_shared_shared_types_config_item_t exports_chipmunk_parser_parser_config_item_t;

typedef chipmunk_shared_shared_types_config_schema_item_t exports_chipmunk_parser_parser_config_schema_item_t;

typedef chipmunk_parser_parse_types_render_options_t exports_chipmunk_parser_parser_render_options_t;

typedef chipmunk_parser_parse_types_parser_config_t exports_chipmunk_parser_parser_parser_config_t;

typedef chipmunk_parser_parse_types_parse_return_t exports_chipmunk_parser_parser_parse_return_t;

typedef chipmunk_parser_parse_types_parse_error_t exports_chipmunk_parser_parser_parse_error_t;

typedef struct {
  exports_chipmunk_parser_parser_config_schema_item_t *ptr;
  size_t len;
} exports_chipmunk_parser_parser_list_config_schema_item_t;

typedef struct {
  exports_chipmunk_parser_parser_config_item_t *ptr;
  size_t len;
} exports_chipmunk_parser_parser_list_config_item_t;

typedef struct {
  bool is_err;
  union {
    exports_chipmunk_parser_parser_init_error_t err;
  } val;
} exports_chipmunk_parser_parser_result_void_init_error_t;

typedef struct {
  bool is_some;
  uint64_t val;
} parse_option_u64_t;

typedef struct {
  exports_chipmunk_parser_parser_parse_return_t *ptr;
  size_t len;
} exports_chipmunk_parser_parser_list_parse_return_t;

typedef struct {
  bool is_err;
  union {
    exports_chipmunk_parser_parser_list_parse_return_t ok;
    exports_chipmunk_parser_parser_parse_error_t err;
  } val;
} exports_chipmunk_parser_parser_result_list_parse_return_parse_error_t;

// Imported Functions from `chipmunk:shared/logging@0.1.0`
// Log the given message with current log level if log level is allowed
extern void chipmunk_shared_logging_log(chipmunk_shared_logging_level_t level, parse_string_t *msg);

// Imported Functions from `chipmunk:shared/sandbox@0.1.0`
// Creates a temporary directory and returns its path.
// 
// The directory is accessible for both reading and writing.
// It is automatically deleted when the session ends.
// 
// Returns an error string if the directory cannot be created due to an I/O error.
extern bool chipmunk_shared_sandbox_temp_directory(parse_string_t *ret, parse_string_t *err);

// Exported Functions from `chipmunk:parser/parser@0.1.0`
void exports_chipmunk_parser_parser_get_version(exports_chipmunk_parser_parser_version_t *ret);
void exports_chipmunk_parser_parser_get_config_schemas(exports_chipmunk_parser_parser_list_config_schema_item_t *ret);
void exports_chipmunk_parser_parser_get_render_options(exports_chipmunk_parser_parser_render_options_t *ret);
bool exports_chipmunk_parser_parser_init(exports_chipmunk_parser_parser_parser_config_t *general_configs, exports_chipmunk_parser_parser_list_config_item_t *plugin_configs, exports_chipmunk_parser_parser_init_error_t *err);
bool exports_chipmunk_parser_parser_parse(parse_list_u8_t *data, uint64_t *maybe_timestamp, exports_chipmunk_parser_parser_list_parse_return_t *ret, exports_chipmunk_parser_parser_parse_error_t *err);

// Helper Functions

void chipmunk_shared_sandbox_result_string_string_free(chipmunk_shared_sandbox_result_string_string_t *ptr);

void chipmunk_shared_shared_types_init_error_free(chipmunk_shared_shared_types_init_error_t *ptr);

void parse_list_string_free(parse_list_string_t *ptr);

void chipmunk_shared_shared_types_config_value_free(chipmunk_shared_shared_types_config_value_t *ptr);

void chipmunk_shared_shared_types_config_item_free(chipmunk_shared_shared_types_config_item_t *ptr);

void parse_tuple2_list_string_string_free(parse_tuple2_list_string_string_t *ptr);

void chipmunk_shared_shared_types_config_schema_type_free(chipmunk_shared_shared_types_config_schema_type_t *ptr);

void parse_option_string_free(parse_option_string_t *ptr);

void chipmunk_shared_shared_types_config_schema_item_free(chipmunk_shared_shared_types_config_schema_item_t *ptr);

void chipmunk_parser_parse_types_parsed_message_free(chipmunk_parser_parse_types_parsed_message_t *ptr);

void parse_list_u64_free(parse_list_u64_t *ptr);

void parse_list_u8_free(parse_list_u8_t *ptr);

void chipmunk_parser_parse_types_attachment_free(chipmunk_parser_parse_types_attachment_t *ptr);

void chipmunk_parser_parse_types_tuple2_parsed_message_attachment_free(chipmunk_parser_parse_types_tuple2_parsed_message_attachment_t *ptr);

void chipmunk_parser_parse_types_parse_yield_free(chipmunk_parser_parse_types_parse_yield_t *ptr);

void chipmunk_parser_parse_types_option_parse_yield_free(chipmunk_parser_parse_types_option_parse_yield_t *ptr);

void chipmunk_parser_parse_types_parse_return_free(chipmunk_parser_parse_types_parse_return_t *ptr);

void chipmunk_parser_parse_types_parse_error_free(chipmunk_parser_parse_types_parse_error_t *ptr);

void chipmunk_parser_parse_types_column_info_free(chipmunk_parser_parse_types_column_info_t *ptr);

void chipmunk_parser_parse_types_list_column_info_free(chipmunk_parser_parse_types_list_column_info_t *ptr);

void chipmunk_parser_parse_types_columns_render_options_free(chipmunk_parser_parse_types_columns_render_options_t *ptr);

void chipmunk_parser_parse_types_option_columns_render_options_free(chipmunk_parser_parse_types_option_columns_render_options_t *ptr);

void chipmunk_parser_parse_types_render_options_free(chipmunk_parser_parse_types_render_options_t *ptr);

void exports_chipmunk_parser_parser_init_error_free(exports_chipmunk_parser_parser_init_error_t *ptr);

void exports_chipmunk_parser_parser_config_item_free(exports_chipmunk_parser_parser_config_item_t *ptr);

void exports_chipmunk_parser_parser_config_schema_item_free(exports_chipmunk_parser_parser_config_schema_item_t *ptr);

void exports_chipmunk_parser_parser_render_options_free(exports_chipmunk_parser_parser_render_options_t *ptr);

void exports_chipmunk_parser_parser_parse_return_free(exports_chipmunk_parser_parser_parse_return_t *ptr);

void exports_chipmunk_parser_parser_parse_error_free(exports_chipmunk_parser_parser_parse_error_t *ptr);

void exports_chipmunk_parser_parser_list_config_schema_item_free(exports_chipmunk_parser_parser_list_config_schema_item_t *ptr);

void exports_chipmunk_parser_parser_list_config_item_free(exports_chipmunk_parser_parser_list_config_item_t *ptr);

void exports_chipmunk_parser_parser_result_void_init_error_free(exports_chipmunk_parser_parser_result_void_init_error_t *ptr);

void parse_option_u64_free(parse_option_u64_t *ptr);

void exports_chipmunk_parser_parser_list_parse_return_free(exports_chipmunk_parser_parser_list_parse_return_t *ptr);

void exports_chipmunk_parser_parser_result_list_parse_return_parse_error_free(exports_chipmunk_parser_parser_result_list_parse_return_parse_error_t *ptr);

// Transfers ownership of `s` into the string `ret`
void parse_string_set(parse_string_t *ret, const char*s);

// Creates a copy of the input nul-terminate string `s` and
// stores it into the component model string `ret`.
void parse_string_dup(parse_string_t *ret, const char*s);

// Deallocates the string pointed to by `ret`, deallocating
// the memory behind the string.
void parse_string_free(parse_string_t *ret);

#ifdef __cplusplus
}
#endif
#endif
