# Paths for the needed SDKs and WIT Files for plugins development in C/C++.
# Please refer for the documentation for more details.

# The path for the locally installed WASI SDK
WASI_SDK_PATH ?= {PATH_TO_LOCAL_WASI_SDK}

# Path for the directory where the WIT files are defined withing chipmunk repository.
WIT_DIR ?= {PATH_OF_CHIPMUNK_REPO}/plugins/plugins_api/wit/v0.1.0/

# The path WASI Adapter file. It defaults to have the file in the source code and it will 
# download the latest version of the files in case it doesn't exist.
WASI_ADAPTER_FILE ?= wasi_snapshot_preview1.reactor.wasm

# The URL to download WASI adapter file.
WASI_ADAPTER_URL := https://github.com/bytecodealliance/wasmtime/releases/download/dev/wasi_snapshot_preview1.reactor.wasm

# Source code files
SRC_CXX = my_parser.cpp

# Files generated by wit-bindgen.
WIT_BINDGEN_GENERATED_C_SRC = parse.c
WIT_BINDGEN_GENERATED_HEADER = parse.h
WIT_BINDGEN_GENERATED_OBJ_TYPE = parse_component_type.o
WIT_BINDGEN_ALL_GENERATED = $(WIT_BINDGEN_GENERATED_C_SRC) $(WIT_BINDGEN_GENERATED_HEADER) $(WIT_BINDGEN_GENERATED_OBJ_TYPE)

# Note:
# Compiling has two steps. The first one will compile the code on an intermediate WASM module, 
# which will be used to generate the plugin as WASM component binary.

# Name of the intermediate WASM binary module.
CORE_WASM_MODULE = plugin_intermediate_module.wasm
# Name of plugin final WASM component file.
FINAL_WASM_COMPONENT = my_parser.wasm

# Use clang and sysroots for WASI SDK
CC = $(WASI_SDK_PATH)/bin/clang
CFLAGS = --sysroot=$(WASI_SDK_PATH)/share/wasi-sysroot

.PHONY: all clean generate-bindings download-adapter

all: $(FINAL_WASM_COMPONENT)

# Generate bindings from WIT files.
generate-bindings: $(WIT_BINDGEN_ALL_GENERATED) 

# Download the WASI adapter 
download-adapter: $(WASI_ADAPTER_FILE)

# Step 1: Compile to core WASM binary module.
$(CORE_WASM_MODULE): $(WIT_BINDGEN_ALL_GENERATED)
	$(CC) $(CFLAGS) $(WIT_BINDGEN_GENERATED_C_SRC) $(WIT_BINDGEN_GENERATED_OBJ_TYPE) $(SRC_CXX) -o $@ -mexec-model=reactor

# Step 2: Convert to final WASM Component.
$(FINAL_WASM_COMPONENT): $(CORE_WASM_MODULE) $(WASI_ADAPTER_FILE)
	wasm-tools component new $< -o $@ --adapt=$(WASI_ADAPTER_FILE)

# Download the WASI adapter if it doesn't exist
$(WASI_ADAPTER_FILE):
	@echo "Downloading WASI adapter: $(WASI_ADAPTER_FILE) from $(WASI_ADAPTER_URL)..."
	@curl -L -o $@ $(WASI_ADAPTER_URL)
	@echo "Download complete."

# Generate bindgen files
$(WIT_BINDGEN_ALL_GENERATED):
	wit-bindgen c $(WIT_DIR) -w chipmunk:parser/parse --out-dir .

# Cleanup generated generated files form compilation only.
clean:
	rm -f $(CORE_WASM_MODULE) $(FINAL_WASM_COMPONENT)
