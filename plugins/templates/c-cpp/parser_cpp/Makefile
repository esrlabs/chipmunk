# --- Optional Parameters ---

# Paths for the needed SDKs and WIT Files for plugins development in C/C++.
# Please refer for the documentation for more details.

# The path for the locally installed WASI SDK
WASI_SDK_PATH ?= {PATH_TO_LOCAL_WASI_SDK}

# Path for the directory where the WIT files are defined withing chipmunk repository.
WIT_DIR ?= {PATH_OF_CHIPMUNK_REPO}/plugins/plugins_api/wit/v0.1.0/

# The path WASI Adapter file. It defaults to have the file in vendor directory and it will 
# download the latest version of the files in case it doesn't exist and if not provided.
WASI_ADAPTER_FILE ?= $(VENDOR_DIR)/wasi_snapshot_preview1.reactor.wasm

# --- Files & Directory Structure ---

DIST_DIR := dist
BINDINGS_DIR := bindings
VENDOR_DIR := vendor
SCRIPTS_DIR := scripts
BUILD_DIR := build

# Source code files
SRC_CXX = $(wildcard src/*.cpp)

# Files generated by wit-bindgen.
WIT_BINDGEN_GENERATED_C_SRC := $(BINDINGS_DIR)/parse.c
WIT_BINDGEN_GENERATED_HEADER := $(BINDINGS_DIR)/parse.h
WIT_BINDGEN_GENERATED_OBJ_TYPE := $(BINDINGS_DIR)/parse_component_type.o
WIT_BINDGEN_ALL_GENERATED = $(WIT_BINDGEN_GENERATED_C_SRC) $(WIT_BINDGEN_GENERATED_HEADER) $(WIT_BINDGEN_GENERATED_OBJ_TYPE)

# Compiled file from `parse.c` source.
WIT_BINDGEN_COMPILED_C_SRC := $(BUILD_DIR)/parse.o

# Note:
# Compiling has two steps. The first one will compile the code on an intermediate WASM module, 
# which will be used to generate the plugin as WASM component binary.

# Name of the intermediate WASM binary module.
CORE_WASM_MODULE = $(BUILD_DIR)/plugin_intermediate_module.wasm
# Name of plugin final WASM component file. This must match the name of the plugin itself.
FINAL_WASM_COMPONENT := $(DIST_DIR)/my_parser.wasm

# Use clang and sysroots from WASI SDK
CC = $(WASI_SDK_PATH)/bin/clang
CXX = $(WASI_SDK_PATH)/bin/clang++
CFLAGS = --sysroot=$(WASI_SDK_PATH)/share/wasi-sysroot

.PHONY: all clean generate-bindings download-adapter

# --- Main Targets ---

all: $(FINAL_WASM_COMPONENT)

# Generate bindings from WIT files.
generate-bindings: $(WIT_BINDGEN_ALL_GENERATED) 

# Download the WASI adapter 
download-adapter: $(WASI_ADAPTER_FILE)

# --- Build Steps ---

# Step 1: Compile C files with C Compiler.
$(WIT_BINDGEN_COMPILED_C_SRC): $(WIT_BINDGEN_GENERATED_C_SRC)
	@mkdir -p $(BUILD_DIR)
	$(CC) $(CFLAGS) -c $< -o $@

# Step 2: Compile to core WASM binary module.
$(CORE_WASM_MODULE): $(WIT_BINDGEN_GENERATED_OBJ_TYPE) $(WIT_BINDGEN_COMPILED_C_SRC)
	@mkdir -p $(BUILD_DIR)
	$(CXX) $(CFLAGS) $(WIT_BINDGEN_COMPILED_C_SRC) $(WIT_BINDGEN_GENERATED_OBJ_TYPE) $(SRC_CXX) -o $@ -mexec-model=reactor

# Step 3: Convert to final WASM Component.
$(FINAL_WASM_COMPONENT): $(CORE_WASM_MODULE) $(WASI_ADAPTER_FILE)
	@mkdir -p $(DIST_DIR)
	wasm-tools component new $< -o $@ --adapt=$(WASI_ADAPTER_FILE)

# Download the WASI adapter if it doesn't exist
$(WASI_ADAPTER_FILE):
	./scripts/download-reactor.sh $@

# Generate bindgen files
$(WIT_BINDGEN_ALL_GENERATED):
	@echo "Generating bindings from WIT files..."
	@mkdir -p $(BINDINGS_DIR)
	wit-bindgen c $(WIT_DIR) -w chipmunk:parser/parse --out-dir $(BINDINGS_DIR)

# --- Cleanup ---

# Cleanup generated generated files form compilation only.
clean:
	rm -rf $(BUILD_DIR) $(DIST_DIR)
