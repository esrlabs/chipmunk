import { DltFilterConfig } from './dlt';
// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { ComponentOptions } from './options';
import type { PluginParserSettings } from './plugins';

export type ComponentDef = { Source: ComponentOptions } | { Parser: ComponentOptions };

/**
 * Represents the type of a component within the system.
 *
 * The component type indicates the general domain of responsibility and
 * functional role of the component. It is used to categorize components
 * according to their purpose in the data processing pipeline.
 */
export type ComponentType = 'RawParser' | 'Parser' | 'Source';

/**
 * Settings for the DLT parser.
 */
export type DltParserSettings = {
    /**
     * Configuration for filtering DLT messages.
     */
    filter_config: DltFilterConfig;
    /**
     * Paths to FIBEX files for additional interpretation of `payload` content.
     */
    fibex_file_paths: Array<string> | null;
    /**
     * Indicates whether the source contains a `StorageHeader`. Set to `true` if applicable.
     */
    with_storage_header: boolean;
    /**
     * Timezone for timestamp adjustment. If specified, timestamps are converted to this timezone.
     */
    tz: string | null;
};

/**
 * Supported file formats for observation.
 */
export type FileFormat = 'PcapNG' | 'PcapLegacy' | 'Text' | 'Binary';

export type Ident = { name: string; desc: string; uuid: string };

export type IdentList = Array<Ident>;

/**
 * Multicast configuration information.
 * - `multiaddr`: A valid multicast address.
 * - `interface`: The address of the local interface used to join the multicast group.
 *   If set to `INADDR_ANY`, the system selects an appropriate interface.
 */
export type MulticastInfo = { multiaddr: string; interface: string | null };

/**
 * Options for observing data within a session.
 */
export type ObserveOptions = {
    /**
     * The description of the data source.
     */
    origin: ObserveOrigin;
    /**
     * The parser configuration to be applied.
     */
    parser: ParserType;
};

/**
 * Describes the source of data for observation.
 */
export type ObserveOrigin =
    | { File: [string, FileFormat, string] }
    | { Concat: Array<[string, FileFormat, string]> }
    | { Stream: [string, Transport] };

/**
 * Specifies the parser to be used for processing session data.
 */
export type ParserType =
    | { Dlt: DltParserSettings }
    | { SomeIp: SomeIpParserSettings }
    | { Text: null }
    | { Plugin: PluginParserSettings };

/**
 * Configuration for executing terminal commands.
 */
export type ProcessTransportConfig = {
    /**
     * The working directory for the command.
     */
    cwd: string;
    /**
     * The command to execute.
     */
    command: string;
    /**
     * Environment variables. If empty, the default environment variables are used.
     */
    envs: Map<string, string>;
};

/**
 * Configuration for serial port connections.
 */
export type SerialTransportConfig = {
    /**
     * The path to the serial port.
     */
    path: string;
    /**
     * The baud rate for the connection.
     */
    baud_rate: number;
    /**
     * The number of data bits per frame.
     */
    data_bits: number;
    /**
     * The flow control setting.
     */
    flow_control: number;
    /**
     * The parity setting.
     */
    parity: number;
    /**
     * The number of stop bits.
     */
    stop_bits: number;
    /**
     * The delay in sending data, in milliseconds.
     */
    send_data_delay: number;
    /**
     * Whether the connection is exclusive.
     */
    exclusive: boolean;
};

export type SessionDescriptor = { parser: Ident; source: Ident };

export type SessionSetup = {
    origin: SourceOrigin;
    parser: ComponentOptions;
    source: ComponentOptions;
};

/**
 * Settings for the SomeIp parser.
 */
export type SomeIpParserSettings = {
    /**
     * Paths to FIBEX files for additional interpretation of `payload` content.
     */
    fibex_file_paths: Array<string> | null;
};

export type SourceOrigin = { File: string } | { Files: Array<string> } | 'Source';

/**
 * Configuration for TCP connections.
 */
export type TCPTransportConfig = {
    /**
     * The address to bind the TCP connection to.
     */
    bind_addr: string;
};

/**
 * Describes the transport source for a session.
 */
export type Transport =
    | { Process: ProcessTransportConfig }
    | { TCP: TCPTransportConfig }
    | { UDP: UDPTransportConfig }
    | { Serial: SerialTransportConfig };

/**
 * Configuration for UDP connections.
 */
export type UDPTransportConfig = {
    /**
     * The address to bind the UDP connection to.
     */
    bind_addr: string;
    /**
     * A list of multicast configurations.
     */
    multicast: Array<MulticastInfo>;
};

/**
 * Configuration for UDP connections.
 */
export type UdpConnectionInfo = {
    /**
     * A list of multicast addresses to listen on.
     */
    multicast_addr: Array<MulticastInfo>;
};
